[["index.html", "R markdown - tips and tricks Chapter 1 PDF in LaTex in R Markdown 1.1 What does PDF mean? 1.2 General info abou LaTex in Markdown 1.3 So what is the purpose of PDF and LaTeX in R markdown?", " R markdown - tips and tricks Students from B2-CB01 and B2-CB02 2022-04-14 Chapter 1 PDF in LaTex in R Markdown Chapter authors: Boyan Avramov, Alexandru Cebanu, Roberto Conti, Tsvetan Ivanov, Simon van de Pas, Afnan Al Shibani 1.1 What does PDF mean? PDF is an abbreviation that stands for Portable Document Format. Its a versatile file format created by Adobe that gives people an easy, reliable way to present and exchange documents - regardless of the software, hardware, or operating systems being used by anyone who views the document. The PDF format is now an open standard, maintained by the International Organization for Standardization (ISO). PDF docs can contain links and buttons, form fields, audio, video, and business logic. They can be signed electronically and can easily be viewed on Windows or MacOS using the free Adobe Acrobat Reader software. 1.1.1 How to create PDF in Markdown? To create a PDF document from R Markdown, you specify the pdf_document output format in the YAML metadata like this: title: &quot;Habits&quot; author: &quot;John Doe&quot; date: &quot;March 22, 2005&quot; output: pdf_document 1.2 General info abou LaTex in Markdown LaTeX is a document prepration system that is very powerful but can sometimes also be a bit confusing. Hence, some useful details are provided that should help R/exams users getting LaTeX installed and used effectively for preparing exams. 1.2.1 What is it? LaTeX is a software system for document preparation. The system encompasses various elements that are important to distinguish: It uses a markup language that can be written in any simple text editor with commands structuring a document (title, sections, etc.), formatting text (italics, bold face, etc.), and providing a powerful mathematical notation. Subsequently, a TeX engine can be used to process such a text file and produce an output document that can be viewed, printed, etc. The probably most commonly-used TeX engine is pdfTeX rendering LaTeX files into PDF documents. TeX distributions ship collections of such TeX engines along with further utilities, macros, and fonts for processing LaTeX files. The most widely-used TeX distributions are TeX Live available on all major operating systems and MikTeX for Windows. 1.2.2 How to install LaTeX in Markdown If you would like to create PDF documents from R Markdown, you will need to have a LaTeX distribution installed. Although there are several traditional options including MiKTeX, MacTeX, and TeX Live, we recommend that R Markdown users install TinyTeX. TinyTeX is a custom LaTeX distribution based on TeX Live that is relatively small in size, but functions well in most cases, especially for R users. Installing or running TinyTeX does not require sysadmin privileges.1 You can install TinyTeX with the R package tinytex (Xie 2022): tinytex::install_tinytex() to uninstall TinyTeX, run tinytex::uninstall_tinytex() 1.3 So what is the purpose of PDF and LaTeX in R markdown? 1.3.1 PDF Converting Markdown to PDF files is a great way tobring your Markdown files like documentsor if you want a different output method other than HTML. Publish &amp; share preliminary results with collaborators. Create professional reports that document our workflow and results directly from our code, reducing the risk of accidental copy and paste or transcription errors. Document our workflow to facilitate reproducibility. Efficiently change code outputs (figures, files) given changes in the data, methods, etc. 1.3.2 LaTeX LaTeX is a document preparation system that is very powerful but can sometimes also be a bit confusing. Hence, some useful details are provided that should help R/exams users getting LaTeX installed and used effectively for preparing exams. It uses a markup language that can be written in any simple text editor with commands structuring a document (title, sections, etc.), formatting text (italics, bold, etc.), and providing a powerful mathematical notation. A TeX engine can be used to process such a text fil and produce an output document that can be viewed, printed, etc. And probably the most commonly-used TeX engine is pdfTeX rendering LaTeX files into PDF documents. TeX distributions ship collections of such TeX engines along further utilities, macros and fonts for processing LaTeX files. And probably the most commonly-used TeX distributions are TeX Live available on all major operating systems and MikTeX for Window. "],["how-to-build-websites-on-r-markdown.html", "Chapter 2 How to Build Websites on R Markdown 2.1 Introduction 2.2 Why do I need an R Project? 2.3 Why use rMarkdown over html/css? 2.4 Create content 2.5 How to host your website on Hera", " Chapter 2 How to Build Websites on R Markdown Chapter authors: Nazim Dadeviren, Anne Foxen, Joseph Abimael, Boyan Lazarov, David Pogossian, Anil Temiz 2.1 Introduction Beforethe library blogdownwas invented, the rmarkdownpackage had provided a simple site generator that did not rely on a third-party site generator like Hugo. You can render collections of R Markdown documents as a website using the rmarkdown::render_site() function. We will call such websites R Markdown websites in this section. The RStudio IDE (version 1.0 or higher) also includes integrated support for developing R Markdown websites. A simple example on how to create website on RStudio To start with, lets walk through a very simple example, a website that includes two pages (HomeandAbout) and a navigation bar to switch between them. First, we need a configuration file_site.yml: name: &quot;my-website&quot; navbar: title: &quot;My Website&quot; left: - text: &quot;Home&quot; href: index.html - text: &quot;About&quot; href: about.html Then two Rmd files,index.Rmd: --- title: &quot;My Website&quot; --- Hello, Website! andabout.Rmd: --- title: &quot;About This Website&quot; --- More about this website. Note that the minimum requirement for any R Markdown website is that it has anindex.Rmdfile as well as a_site.ymlfile. As for the context of the site that all works the same as you usually put code in rStudio. You can put the code in the place where in the examples it says More about this website. If you execute thermarkdown::render_site()function from within the directory containing the website, the following will occur: All of the.Rmdand.mdfiles in the root website directory will be rendered into HTML. Note, however, that Markdown files beginning with_are not rendered (this is a convention to designate files that are to be included by top level Rmd documents as child documents). The generated HTML files and any supporting files (e.g., CSS and JavaScript) are copied into an output directory (_siteby default). The HTML files within the_sitedirectory are now ready to deploy as a standalone static website. Thenavbarelement of_site.ymlcan be used to define a common navigation bar for your website. You can include internal and external links on the navigation bar as well as drop-down menus for sites with a large number of pages. R Markdown includes many facilities for generation of HTML content from R objects, including: The conversion of standard R output types (e.g., textual output and plots) within code chunks done automatically byknitr. A variety of ways to generate HTML tables, including theknitr::kable()function and other packages such askableExtraandpander. A large number of available HTML widgets that provide rich JavaScript data visualizations. As a result, for many R Markdown websites you will not need to worry about generating HTML output at all (since it is created automatically). The_site.ymlfile has a number of options that affect site output, including where it is written and what files are included and excluded from the site. Here is an example that makes use of a few of these options: name: my-website output_dir: \"_site\" include: [import.R] exclude: [docs.txt, \"*.csv\"] Thenamefield provides a suggested URL path for your website when it is published (by default this is just the name of the directory containing the site). Theoutput_dirfield indicates which directory to copy site content into (\"_siteis the default if none is specified). It can be.\"to keep all content within the root website directory alongside the source code. 2.2 Why do I need an R Project? The R Project is useful because RStudio will recognize your project as a website, and provide appropriate build tools. Note: After creating the R Project and initial files, you may need to close the project and reopen it before R will recognize it as a website and show the appropriate build tools. 2.3 Why use rMarkdown over html/css? in r markdown it is very easy to combine code with an explanation. In the rendering the markdown file will be converted to an html file. This function can also be used with css to make the website look better. Why would put in all the effort to create a whole website with html when you can convert your graphs with the explination via r. It is a good way to show the true extent of ones research as everything is included. 2.4 Create content Edit the _site.yml file to change the metadata, layout, and theme of your website. For example, the _site.yml for cats personal website looks like this: name: &quot;cat-website&quot; navbar: title: &quot;My cats&#39; website&quot; left: - text: &quot;Home&quot; href: index.html right: - icon: fa-envelope fa-lg href: mailto:&lt;cats@catemail.com&gt; - icon: fa-github fa-lg href: http://github.com/&lt;YOUR_GH_NAME&gt;/ output: html_document: theme: darkly Source: https://www.emilyzabor.com/tutorials/rmarkdown_websites_tutorial.html#:~:text=The%20R%20Project%20is%20useful,show%20the%20appropriate%20build%20tools. 2.5 How to host your website on Hera Request your own hosting space on our Linux webhosting (hera.fhict.nl) This webhosting is setup to host your own PHP websites. You can use these applications here: PHP Joomla Wordpress Magento Source: https://selfservice.app.fhict.nl/Webhosting/Linux Hosting The Hera and Venus servers are special made for practice making web applications. You can apply for an account and use ASP, ASPX, PHP, MySQL. Windows and Linux. The URL for hosting: https://apps.fhict.nl/selfservice Source: https://portal.fhict.nl/Studentenplein/ISSD/Shared%20Documents/Welcome%20to%20Fontys%20University%20of%20Applied%20Sciences.pdf#search=hera "],["shiny.html", "Chapter 3 Shiny 3.1 Introduction 3.2 Structure 3.3 Building the User Interface 3.4 Using the Server function 3.5 Calling the Shiny App", " Chapter 3 Shiny Chapter authors: Randolph Anokyewaah, Ivan Bekriev, Kalina Grigorova, Vasil Kaloyanov, Yavor Stoichkov 3.1 Introduction Shiny is an R package that makes it easy to build interactive web apps straight from R. You can also extend your Shiny apps with CSS themes, html or JavaScript actions. 3.2 Structure Shiny apps are contained in a single script called app.R. On the other hand the app.R is divided into three main components: a user interface object - controls the layout and appearance of the app. a server function - contains the instructions that your computer needs to build your app. a call to the shinyApp function - creates Shiny app objects from an explicit UI/server pair. 3.3 Building the User Interface Shiny uses the function fluidPage to create a display that automatically adjusts to the dimensions of the users browser window. You lay out the user interface of the app by placing elements in the fluidPage function.The most popular elements to be added in the fluidPage function are the titlePanel and sidebarLayout. sidebarLayout usually needs two arguments : sidebarPanel and the mainPanel functions. ui &lt;- fluidPage( titlePanel(&quot;title panel&quot;), sidebarLayout(position = &quot;right&quot;, sidebarPanel(&quot;sidebar panel&quot;), mainPanel(&quot;main panel&quot;) ) ) In addition to these functions the developer might use HTML tags to make the app better looking and add other features such as pictures. img(src = &quot;my_image.png&quot;, height = 72, width = 72) It is also possible to include controls widgets with different functionalities. For example, Shiny provides a function named actionButton that creates an Action Button and a function named sliderInput that creates a slider bar. The widgets are usually situated inside the sidebarPanel or mainPanel. ui &lt;- fluidPage( titlePanel(&quot;Basic widgets&quot;), fluidRow( column(3, h3(&quot;Buttons&quot;), actionButton(&quot;action&quot;, &quot;Action&quot;), br(), br(), submitButton(&quot;Submit&quot;)), column(3, h3(&quot;Single checkbox&quot;), checkboxInput(&quot;checkbox&quot;, &quot;Choice A&quot;, value = TRUE)), column(3, checkboxGroupInput(&quot;checkGroup&quot;, h3(&quot;Checkbox group&quot;), choices = list(&quot;Choice 1&quot; = 1, &quot;Choice 2&quot; = 2, &quot;Choice 3&quot; = 3), selected = 1)), column(3, dateInput(&quot;date&quot;, h3(&quot;Date input&quot;), value = &quot;2014-01-01&quot;)) ), fluidRow( column(3, dateRangeInput(&quot;dates&quot;, h3(&quot;Date range&quot;))), column(3, fileInput(&quot;file&quot;, h3(&quot;File input&quot;))), column(3, h3(&quot;Help text&quot;), helpText(&quot;Note: help text isn&#39;t a true widget,&quot;, &quot;but it provides an easy way to add text to&quot;, &quot;accompany other widgets.&quot;)), column(3, numericInput(&quot;num&quot;, h3(&quot;Numeric input&quot;), value = 1)) ) ) 3.4 Using the Server function The server function plays a special role in the Shiny process; it builds a list-like object named output that contains all of the code needed to update the R objects in the app. .Each R object needs to have its own entry in the list.You can create an entry by defining a new element for output within the server function. The element name should match the name of the reactive element that you created in the ui. Each entry to output should contain the output of one of Shinys render functions. These functions capture an R expression and do some light pre-processing on the expression. Use the render function that corresponds to the type of reactive object you are making. render | function creates ------- | ------------------ renderDataTable | DataTable renderImage | images renderPlot | plots renderPrint | any printed output renderTable | data frame, matrix, other table like structures ui &lt;- fluidPage( titlePanel(&quot;censusVis&quot;), sidebarLayout( sidebarPanel( helpText(&quot;Create demographic maps with information from the 2010 US Census.&quot;), selectInput(&quot;var&quot;, label = &quot;Choose a variable to display&quot;, choices = c(&quot;Percent White&quot;, &quot;Percent Black&quot;, &quot;Percent Hispanic&quot;, &quot;Percent Asian&quot;), selected = &quot;Percent White&quot;), sliderInput(&quot;range&quot;, label = &quot;Range of interest:&quot;, min = 0, max = 100, value = c(0, 100)) ), mainPanel( textOutput(&quot;selected_var&quot;) ) ) ) server &lt;- function(input, output) { output$selected_var &lt;- renderText({ &quot;You have selected this&quot; }) } 3.5 Calling the Shiny App At the end, when the ui and the server have been created in order to start the whole app, it is necessary to call its components: shinyApp(ui = ui, server = server) Tip: Creating a dashboard using Shiny can be rather difficult. The best tip regarding how to start using Shiny is to find the code of already existing dashboard and begin playing with it. In this way it will become more clear how the functions work and what combinations can be applied. "],["html-css-and-flexdashboard.html", "Chapter 4 HTML, CSS and Flexdashboard 4.1 HTML and CSS 4.2 Flexdashboard", " Chapter 4 HTML, CSS and Flexdashboard Ertugrul Demirci, Bram Gielen, Boris Kamdem Tchuenkam, Max Moolenaar, Niels Saes, Armin Strojil 4.1 HTML and CSS Image below about how html and css work together. In a R markdown file you can just use html. If you want to use css in a r markdown file, you can use the css option: output: html_document: css: style.css If you want to include multiple css files, you may list them in brackets. output: html_document: css: [style-1.css, style-2.css] You can also use a css chunk to directly use the css in your r markdown file. {css, echo=FALSE} p { font-size: 20px; } The chunk option echo = false means that the css will be used on the html, but you will not see the chunk in the knitted file. We will use echo = True in the rest of the document to show the examples. p { font-size: 20px; font-family: &quot;Times New Roman&quot;; } .example1 { color: blue; } .example2 { color: red; } .example3 { color: green; } p { font-size: 20px; font-family: \"Times New Roman\"; } .example1 { color: blue; } .example2 { color: red; } .example3 { color: green; } You can also use divs to style specific elements instead of the whole document. example 1 example 2 example 3 See the cheat sheets below to see what markdown syntax will turn into in the final report. R markdown cheat sheet 1 R markdown cheat sheet 2 4.2 Flexdashboard To install the flexdashboard, you can use the following code install.packages(flexdashboard) To load the flexdashboard package, you can use library(flexdashboard) You should also make sure that your output is in the form of a flexdashboard, you can do this by changing the output to flexdashboard::flex_dashboard. The goal of flexdashboard is to make it easy to create interactive dashboards for R, using R Markdown. Use R Markdown to publish a group of related data visualizations as a dashboard. Support for a wide variety of components including htmlwidgets; base, lattice, and grid graphics; tabular data; gauges and value boxes; and text annotations. Flexible and easy to specify row and column-based layouts. Components are intelligently re-sized to fill the browser and adapted for display on mobile devices. Storyboard layouts for presenting sequences of visualizations and related commentary. To install the flexdashboard, you can use the following code install.packages(flexdashboard) To load the flexdashboard package, you can use You should also make sure that your output is in the form of a flexdashboard, you can do this by changing the output to flexdashboard::flex_dashboard. The goal of flexdashboard is to make it easy to create interactive dashboards for R, using R Markdown. Use R Markdown to publish a group of related data visualizations as a dashboard. Support for a wide variety of components including htmlwidgets; base, lattice, and grid graphics; tabular data; gauges and value boxes; and text annotations. Flexible and easy to specify row and column-based layouts. Components are intelligently re-sized to fill the browser and adapted for display on mobile devices. Storyboard layouts for presenting sequences of visualizations and related commentary. ggplot(gss_cat, aes(race, tvhours, fill=race)) +geom_col() You can add an input sidebar to a flexdashboard by adding the {.sidebar} attribute to a column, which indicates that it should be laid out flush to the left with a default width of 250 pixels and a special background color. Sidebars always appear on the left no matter where they are defined within the flow of the document. "]]
